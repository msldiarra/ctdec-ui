type Appointment implements Node {
  id: ID!
  number: String
  date: Date
  status: String
  location: String
  receipt: String
  nina: String
  firstName: String
  lastName: String
  fatherFirstName: String
  motherFirstName: String
  motherLastName: String
}

type AppointmentsConnection {
  pageInfo: PageInfo!
  edges: [AppointmentsEdge]
}

type AppointmentsEdge {
  node: Appointment
  cursor: String!
}

input AssignAppointmentToUserInput {
  viewerId: String!
  appointmentNumber: String!
  userId: Int!
  clientMutationId: String!
}

type AssignAppointmentToUserPayload {
  viewer: Viewer
  clientMutationId: String!
}

scalar Date

type Location implements Node {
  id: ID!
  country: String
  city: String
  code: String
  searchTerms: String
}

type Mutation {
  requestAppointmentByNINAMutation(input: RequestAppointmentByNINAInput!): RequestAppointmentByNINAPayload
  requestAppointmentByReceiptMutation(input: RequestAppointmentByReceiptInput!): RequestAppointmentByReceiptPayload
  requestAppointmentByDefaultMutation(input: RequestAppointmentByDefaultInput!): RequestAppointmentByDefaultPayload
  assignAppointmentToUserMutation(input: AssignAppointmentToUserInput!): AssignAppointmentToUserPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PlacesConnection {
  pageInfo: PageInfo!
  edges: [PlacesEdge]
}

type PlacesEdge {
  node: Location
  cursor: String!
}

type Query {
  node(id: ID!): Node
  viewer(viewerId: Int): Viewer
}

input RequestAppointmentByDefaultInput {
  viewerId: String!
  mail: String!
  city: String
  country: String
  countryCode: String
  lastName: String
  firstName: String
  fatherFirstName: String
  motherFirstName: String
  motherLastName: String
  clientMutationId: String!
}

type RequestAppointmentByDefaultPayload {
  viewer: Viewer
  clientMutationId: String!
}

input RequestAppointmentByNINAInput {
  viewerId: String!
  nina: String!
  phone: String!
  mail: String!
  city: String
  country: String
  countryCode: String
  clientMutationId: String!
}

type RequestAppointmentByNINAPayload {
  viewer: Viewer
  clientMutationId: String!
}

input RequestAppointmentByReceiptInput {
  viewerId: String!
  reference: String!
  phone: String!
  mail: String!
  city: String
  country: String
  countryCode: String
  clientMutationId: String!
}

type RequestAppointmentByReceiptPayload {
  viewer: Viewer
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  login: String
  email: String
  enabled: Boolean
  appointments(after: String, first: Int, before: String, last: Int, status: String!): AppointmentsConnection
}

type Viewer implements Node {
  id: ID!
  user: User
  places(after: String, first: Int, before: String, last: Int, search: String!): PlacesConnection
}
